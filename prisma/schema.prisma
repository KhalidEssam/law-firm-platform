generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USER & AUTH
// ============================================
model User {
  id               String   @id @default(uuid())
  auth0Id          String?  @unique
  email            String   @unique
  username         String
  nickname         String?
  fullName         String?
  gender           String?
  ageGroup         String?
  nationality      String?
  employmentSector String?
  profession       String?
  city             String?
  biography        String?  @db.VarChar(500)  // Add this field
  photo            String?                     // Add this field
  personalEmail    String?
  loyaltyTier      String?
  subscriptionTier String?
  profileStatus    String?   @default("pending")
  mobileVerified   Boolean   @default(false)
  emailVerified    Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?

  roles                    UserRole[]
  pointsBalance            Int      @default(0)
  walletBalance            Float    @default(0)

  // Relations
  phoneNumbers             UserPhoneNumber[]
  addresses                UserAddress[]
  membership               Membership?
  sessions                 Session[]
  auditLogs                AuditLog[]
  paymentMethods           PaymentMethod[]
  transactionLogs          TransactionLog[]
  notifications            Notification[]
  notificationPreferences  NotificationPreference[]
  userActivities           UserActivity[]
  
  // Legal Platform specific
  consultationRequests     ConsultationRequest[]
  legalOpinionRequests     LegalOpinionRequest[]
  serviceRequests          ServiceRequest[]
  litigationCases          LitigationCase[]
  callRequests             CallRequest[]
  supportTickets           SupportTicket[]
  requestRatings           RequestRating[]
  documentUploads          Document[]
  
  // Provider relations
  providerProfile          ProviderProfile?
  providerUsers            ProviderUser[]
  assignedRequests         ConsultationRequest[] @relation("AssignedProvider")
  assignedOpinions         LegalOpinionRequest[] @relation("AssignedProvider")
  assignedServices         ServiceRequest[] @relation("AssignedProvider")
  assignedCases            LitigationCase[] @relation("AssignedProvider")
  assignedCalls            CallRequest[] @relation("AssignedProvider")
  providerComments         RequestComment[]
  sentQuotes               ServiceQuote[]

  @@index([email])
  @@index([auth0Id])
}
model UserPhoneNumber {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  phone      String
  isPrimary  Boolean  @default(false)
  isVerified Boolean  @default(false)
  otpCode    String?
  otpExpiry  DateTime?
  createdAt  DateTime @default(now())
  deletedAt  DateTime?

  @@unique([phone])
  @@index([userId, isPrimary])
}

model UserAddress {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type       String   @default("home") // home, work, billing
  street     String
  city       String
  state      String?
  country    String
  postalCode String?
  isPrimary  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?

  @@index([userId, isPrimary])
}

// ============================================
// RBAC
// ============================================
model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  category    String?
  roles       RolePermission[]
  deletedAt   DateTime?
}

model RolePermission {
  permissionId Int
  roleId       Int
  assignedAt   DateTime @default(now())
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  deletedAt    DateTime?

  @@id([permissionId, roleId])
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  users       UserRole[]
  permissions RolePermission[]
  deletedAt   DateTime?
}

model UserRole {
  userId     String
  roleId     Int
  assignedAt DateTime @default(now())
  user       User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  deletedAt  DateTime?

  @@id([userId, roleId])
}

// ============================================
// MEMBERSHIP & PLANS
// ============================================
model Membership {
  id               String     @id @default(uuid())
  userId           String     @unique
  tierId           Int
  startDate        DateTime   @default(now())
  endDate          DateTime?
  isActive         Boolean    @default(true)
  autoRenew        Boolean    @default(true)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  user             User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  tier             MembershipTier @relation(fields: [tierId], references: [id])
  invoices         MembershipInvoice[]
  couponRedemptions MembershipCouponRedemption[]
  changeLogs       MembershipChangeLog[]
  quotaUsage       MembershipQuotaUsage[]
}

model MembershipTier {
  id                    Int        @id @default(autoincrement())
  name                  String     @unique
  nameAr                String?
  description           String?
  descriptionAr         String?
  price                 Float
  currency              String     @default("SAR")
  billingCycle          String     @default("monthly") // monthly, yearly
  
  // Quota limits
  consultationsPerMonth Int?
  opinionsPerMonth      Int?
  servicesPerMonth      Int?
  casesPerMonth         Int?
  callMinutesPerMonth   Int?
  
  benefits              Json?
  isActive              Boolean    @default(true)
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  
  memberships           Membership[]
  oldTierChangeLogs     MembershipChangeLog[] @relation("OldTier")
  newTierChangeLogs     MembershipChangeLog[] @relation("NewTier")
}

model MembershipChangeLog {
  id            String   @id @default(uuid())
  membershipId  String
  oldTierId     Int?
  newTierId     Int?
  reason        String?
  changedAt     DateTime @default(now())
  membership    Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  oldTier       MembershipTier? @relation("OldTier", fields: [oldTierId], references: [id])
  newTier       MembershipTier? @relation("NewTier", fields: [newTierId], references: [id])
}

model MembershipQuotaUsage {
  id                 String   @id @default(uuid())
  membershipId       String
  periodStart        DateTime
  periodEnd          DateTime
  consultationsUsed  Int      @default(0)
  opinionsUsed       Int      @default(0)
  servicesUsed       Int      @default(0)
  casesUsed          Int      @default(0)
  callMinutesUsed    Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  membership         Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)

  @@unique([membershipId, periodStart])
  @@index([membershipId, periodStart])
}

// ============================================
// BILLING & PAYMENTS
// ============================================
model MembershipInvoice {
  id            String      @id @default(uuid())
  membershipId  String
  invoiceNumber String      @unique
  amount        Float
  currency      String      @default("SAR")
  dueDate       DateTime
  status        String       @default("unpaid") // unpaid, paid, overdue, cancelled
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  membership    Membership   @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  payments      MembershipPayment[]

  @@index([membershipId])
  @@index([status, dueDate])
}

model MembershipPayment {
  id            String      @id @default(uuid())
  invoiceId     String
  provider      String      // moyasar, hyperpay, etc.
  providerTxnId String?
  amount        Float
  currency      String      @default("SAR")
  status        String       @default("pending") // pending, completed, failed, refunded
  metadata      Json?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  invoice       MembershipInvoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
  @@index([providerTxnId])
}

model MembershipCoupon {
  id             String   @id @default(uuid())
  code           String   @unique
  description    String?
  descriptionAr  String?
  discountType   String   // percentage, fixed
  discountValue  Float
  validFrom      DateTime
  validUntil     DateTime?
  maxRedemptions Int?
  currentRedemptions Int @default(0)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  redemptions    MembershipCouponRedemption[]
}

model MembershipCouponRedemption {
  id            String   @id @default(uuid())
  couponId      String
  membershipId  String
  discountAmount Float
  redeemedAt    DateTime @default(now())
  coupon        MembershipCoupon @relation(fields: [couponId], references: [id])
  membership    Membership       @relation(fields: [membershipId], references: [id], onDelete: Cascade)

  @@index([couponId])
  @@index([membershipId])
}

model PaymentMethod {
  id          String   @id @default(uuid())
  userId      String
  type        String   // credit_card, debit_card, wallet
  details     Json?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isDefault])
}

model TransactionLog {
  id          String   @id @default(uuid())
  userId      String
  type        String   // subscription, wallet_topup, service_payment, refund
  amount      Float
  currency    String   @default("SAR")
  reference   String?
  status      String
  metadata    Json?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([type, status])
}

// ============================================
// LEGAL PROVIDERS
// ============================================
model ProviderProfile {
  id                 String   @id @default(uuid())
  userId             String   @unique
  organizationName   String
  organizationNameAr String?
  licenseNumber      String   @unique
  taxNumber          String?
  description        String?
  descriptionAr      String?
  
  // Status
  verificationStatus String   @default("pending") // pending, approved, rejected, suspended
  isActive           Boolean  @default(false)
  
  // Working hours
  workingDays        Json?    // {monday: true, tuesday: true, ...}
  workingHours       Json?    // {start: "09:00", end: "17:00"}
  
  // Contact
  businessEmail      String?
  businessPhone      String?
  website            String?
  
  // Documents
  documents          Json?
  
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  deletedAt          DateTime?
  
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  users              ProviderUser[]
  services           ProviderService[]
  schedules          ProviderSchedule[]
  
  @@index([verificationStatus])
}

model ProviderUser {
  id                String   @id @default(uuid())
  providerId        String
  userId            String
  role              String   // account_manager, lawyer, assistant
  specializations   Json?
  isActive          Boolean  @default(true)
  canAcceptRequests Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?
  
  provider          ProviderProfile @relation(fields: [providerId], references: [id], onDelete: Cascade)
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  collaborations    RequestCollaborator[]
  
  @@unique([providerId, userId])
  @@index([providerId, isActive])
}

model ProviderService {
  id          String   @id @default(uuid())
  providerId  String
  serviceType String   // consultation, legal_opinion, litigation, specific_service
  category    String?
  isActive    Boolean  @default(true)
  pricing     Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  provider    ProviderProfile @relation(fields: [providerId], references: [id], onDelete: Cascade)
  
  @@index([providerId, serviceType])
}

model ProviderSchedule {
  id          String   @id @default(uuid())
  providerId  String
  dayOfWeek   Int      // 0-6 (Sunday-Saturday)
  startTime   String   // HH:mm format
  endTime     String
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  provider    ProviderProfile @relation(fields: [providerId], references: [id], onDelete: Cascade)
  
  @@unique([providerId, dayOfWeek])
}

// ============================================
// CONSULTATION REQUESTS
// ============================================


// ============================================
// LEGAL OPINION REQUESTS
// ============================================
model LegalOpinionRequest {
  id                String   @id @default(uuid())
  requestNumber     String   @unique
  subscriberId      String
  assignedProviderId String?
  
  subject           String
  description       String
  caseDetails       Json?
  
  status            String   @default("pending") // pending, quote_sent, quote_accepted, in_progress, completed, disputed, cancelled
  
  // Quote
  quoteAmount       Float?
  quoteCurrency     String?  @default("SAR")
  quoteValidUntil   DateTime?
  quoteAcceptedAt   DateTime?
  
  // Opinion delivery
  opinionDocument   String?
  deliveredAt       DateTime?
  
  // Dispute (48h window)
  disputedAt        DateTime?
  disputeReason     String?
  disputeResolution String?
  
  // Payment
  paymentStatus     String?  @default("pending") // pending, paid, refunded
  paymentReference  String?
  
  submittedAt       DateTime @default(now())
  completedAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?
  
  subscriber        User     @relation(fields: [subscriberId], references: [id])
  assignedProvider  User?    @relation("AssignedProvider", fields: [assignedProviderId], references: [id])
  
  documents         Document[]
  messages          RequestMessage[]
  statusHistory     RequestStatusHistory[]
  rating            RequestRating?
  
  @@index([subscriberId, status])
  @@index([assignedProviderId, status])
}

// ============================================
// SERVICE REQUESTS
// ============================================
model ServiceRequest {
  id                String   @id @default(uuid())
  requestNumber     String   @unique
  subscriberId      String
  assignedProviderId String?
  
  serviceType       String
  category          String?
  description       String
  requirements      Json?
  
  status            String   @default("pending") // pending, quote_sent, quote_accepted, in_progress, completed, cancelled
  
  submittedAt       DateTime @default(now())
  completedAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?
  
  subscriber        User     @relation(fields: [subscriberId], references: [id])
  assignedProvider  User?    @relation("AssignedProvider", fields: [assignedProviderId], references: [id])
  
  quote             ServiceQuote?
  documents         Document[]
  messages          RequestMessage[]
  statusHistory     RequestStatusHistory[]
  rating            RequestRating?
  
  @@index([subscriberId, status])
  @@index([assignedProviderId, status])
}

model ServiceQuote {
  id                String   @id @default(uuid())
  serviceRequestId  String   @unique
  providerId        String
  
  amount            Float
  currency          String   @default("SAR")
  breakdown         Json?
  description       String?
  validUntil        DateTime
  
  status            String   @default("pending") // pending, accepted, rejected, expired
  acceptedAt        DateTime?
  rejectedAt        DateTime?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  serviceRequest    ServiceRequest @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
  provider          User           @relation(fields: [providerId], references: [id])
  
  @@index([serviceRequestId])
}

// ============================================
// LITIGATION CASES
// ============================================
model LitigationCase {
  id                String   @id @default(uuid())
  caseNumber        String   @unique
  subscriberId      String
  assignedProviderId String?
  
  caseType          String
  caseSubtype       String?
  title             String
  description       String
  courtName         String?
  caseDetails       Json?
  
  status            String   @default("pending") // pending, quote_sent, quote_accepted, active, closed, cancelled
  
  // Quote
  quoteAmount       Float?
  quoteCurrency     String?  @default("SAR")
  quoteDetails      Json?
  quoteValidUntil   DateTime?
  quoteAcceptedAt   DateTime?
  
  // Payment
  paymentStatus     String?  @default("pending")
  paymentReference  String?
  
  submittedAt       DateTime @default(now())
  closedAt          DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?
  
  subscriber        User     @relation(fields: [subscriberId], references: [id])
  assignedProvider  User?    @relation("AssignedProvider", fields: [assignedProviderId], references: [id])
  
  documents         Document[]
  messages          RequestMessage[]
  hearings          CaseHearing[]
  statusHistory     RequestStatusHistory[]
  rating            RequestRating?
  
  @@index([subscriberId, status])
  @@index([assignedProviderId, status])
}

model CaseHearing {
  id              String   @id @default(uuid())
  caseId          String
  hearingDate     DateTime
  hearingType     String?  // initial, follow_up, verdict
  location        String?
  notes           String?
  outcome         String?
  nextHearingDate DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  case            LitigationCase @relation(fields: [caseId], references: [id], onDelete: Cascade)
  
  @@index([caseId, hearingDate])
}

// ============================================
// CALL REQUESTS
// ============================================
model CallRequest {
  id                String   @id @default(uuid())
  requestNumber     String   @unique
  subscriberId      String
  assignedProviderId String?
  
  consultationType  String?
  purpose           String
  preferredDate     DateTime?
  preferredTime     String?
  
  status            String   @default("pending") // pending, scheduled, in_progress, completed, cancelled
  
  // Scheduled call details
  scheduledAt       DateTime?
  scheduledDuration Int?     // minutes
  actualDuration    Int?
  
  // Call session
  callStartedAt     DateTime?
  callEndedAt       DateTime?
  recordingUrl      String?
  callPlatform      String?  // zoom, google_meet, custom
  callLink          String?
  
  submittedAt       DateTime @default(now())
  completedAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?
  
  subscriber        User     @relation(fields: [subscriberId], references: [id])
  assignedProvider  User?    @relation("AssignedProvider", fields: [assignedProviderId], references: [id])
  
  messages          RequestMessage[]
  statusHistory     RequestStatusHistory[]
  rating            RequestRating?
  
  @@index([subscriberId, status])
  @@index([assignedProviderId, scheduledAt])
}

// ============================================
// SHARED REQUEST MODELS
// ============================================
model Document {
  id                  String   @id @default(uuid())
  uploadedBy          String
  fileName            String
  fileUrl             String
  fileType            String
  fileSize            Int
  
  // Polymorphic relations
  consultationId      String?
  legalOpinionId      String?
  serviceRequestId    String?
  litigationCaseId    String?
  supportTicketId     String?
  
  description         String?
  isVerified          Boolean  @default(false)
  uploadedAt          DateTime @default(now())
  deletedAt           DateTime?
  
  uploader            User     @relation(fields: [uploadedBy], references: [id])
  consultation        ConsultationRequest? @relation(fields: [consultationId], references: [id], onDelete: Cascade)
  legalOpinion        LegalOpinionRequest? @relation(fields: [legalOpinionId], references: [id], onDelete: Cascade)
  serviceRequest      ServiceRequest?      @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
  litigationCase      LitigationCase?      @relation(fields: [litigationCaseId], references: [id], onDelete: Cascade)
  supportTicket       SupportTicket?       @relation(fields: [supportTicketId], references: [id], onDelete: Cascade)
  
  @@index([uploadedBy])
  @@index([consultationId])
  @@index([legalOpinionId])
  @@index([serviceRequestId])
  @@index([litigationCaseId])
}

model RequestMessage {
  id                  String   @id @default(uuid())
  senderId            String
  message             String
  messageType         String   @default("text") // text, info_request, document_request, system
  
  // Polymorphic relations
  consultationId      String?
  legalOpinionId      String?
  serviceRequestId    String?
  litigationCaseId    String?
  callRequestId       String?
  supportTicketId     String?
  
  isRead              Boolean  @default(false)
  sentAt              DateTime @default(now())
  deletedAt           DateTime?
  
  consultation        ConsultationRequest? @relation(fields: [consultationId], references: [id], onDelete: Cascade)
  legalOpinion        LegalOpinionRequest? @relation(fields: [legalOpinionId], references: [id], onDelete: Cascade)
  serviceRequest      ServiceRequest?      @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
  litigationCase      LitigationCase?      @relation(fields: [litigationCaseId], references: [id], onDelete: Cascade)
  callRequest         CallRequest?         @relation(fields: [callRequestId], references: [id], onDelete: Cascade)
  supportTicket       SupportTicket?       @relation(fields: [supportTicketId], references: [id], onDelete: Cascade)
  
  @@index([consultationId, sentAt])
  @@index([legalOpinionId, sentAt])
  @@index([serviceRequestId, sentAt])
  @@index([litigationCaseId, sentAt])
  @@index([callRequestId, sentAt])
}

model RequestComment {
  id                  String   @id @default(uuid())
  authorId            String
  comment             String
  isInternal          Boolean  @default(true) // Internal provider notes vs subscriber-visible
  
  // Polymorphic relations
  consultationId      String?
  legalOpinionId      String?
  serviceRequestId    String?
  litigationCaseId    String?
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  deletedAt           DateTime?
  
  author              User     @relation(fields: [authorId], references: [id])
  
  @@index([consultationId])
  @@index([legalOpinionId])
  @@index([serviceRequestId])
  @@index([litigationCaseId])
}

model RequestStatusHistory {
  id                  String   @id @default(uuid())
  fromStatus          String?
  toStatus            String
  reason              String?
  changedBy           String?
  
  // Polymorphic relations
  consultationId      String?
  legalOpinionId      String?
  serviceRequestId    String?
  litigationCaseId    String?
  callRequestId       String?
  
  changedAt           DateTime @default(now())
  
  consultation        ConsultationRequest? @relation(fields: [consultationId], references: [id], onDelete: Cascade)
  legalOpinion        LegalOpinionRequest? @relation(fields: [legalOpinionId], references: [id], onDelete: Cascade)
  serviceRequest      ServiceRequest?      @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
  litigationCase      LitigationCase?      @relation(fields: [litigationCaseId], references: [id], onDelete: Cascade)
  callRequest         CallRequest?         @relation(fields: [callRequestId], references: [id], onDelete: Cascade)
  
  @@index([consultationId, changedAt])
  @@index([legalOpinionId, changedAt])
  @@index([serviceRequestId, changedAt])
  @@index([litigationCaseId, changedAt])
}

model RequestCollaborator {
  id               String   @id @default(uuid())
  providerUserId   String

  // Foreign keys for polymorphic relations
  consultationId   String?
  legalOpinionId   String?
  serviceRequestId String?
  litigationCaseId String?

  role             String?  // lead, support, reviewer
  status           String   @default("pending") // pending, accepted, rejected
  invitedAt        DateTime @default(now())
  respondedAt      DateTime?

  providerUser     ProviderUser @relation(fields: [providerUserId], references: [id])

  // 👇 Relation to ConsultationRequest
  consultation     ConsultationRequest? @relation("ConsultationCollaborators", fields: [consultationId], references: [id])

  @@index([providerUserId])
  @@index([consultationId])
}


model ConsultationRequest {
  id                 String   @id @default(uuid())
  requestNumber      String   @unique
  subscriberId       String
  assignedProviderId String?

  consultationType   String
  category           String?
  subject            String
  description        String
  urgency            String   @default("normal")
  status             String   @default("pending")

  submittedAt        DateTime @default(now())
  assignedAt         DateTime?
  respondedAt        DateTime?
  completedAt        DateTime?
  slaDeadline        DateTime?
  slaStatus          String?

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  deletedAt          DateTime?

  subscriber         User     @relation(fields: [subscriberId], references: [id])
  assignedProvider   User?    @relation("AssignedProvider", fields: [assignedProviderId], references: [id])

  documents          Document[]
  messages           RequestMessage[]
  statusHistory      RequestStatusHistory[]

  // 👇 Match the relation name exactly
  collaborators      RequestCollaborator[] @relation("ConsultationCollaborators")

  rating             RequestRating?

  @@index([subscriberId, status])
  @@index([assignedProviderId, status])
  @@index([status, slaDeadline])
}


model RequestRating {
  id                  String   @id @default(uuid())
  subscriberId        String
  rating              Int      // 1-5
  comment             String?
  
  // Polymorphic relations
  consultationId      String?  @unique
  legalOpinionId      String?  @unique
  serviceRequestId    String?  @unique
  litigationCaseId    String?  @unique
  callRequestId       String?  @unique
  
  createdAt           DateTime @default(now())
  
  subscriber          User     @relation(fields: [subscriberId], references: [id])
  consultation        ConsultationRequest? @relation(fields: [consultationId], references: [id], onDelete: Cascade)
  legalOpinion        LegalOpinionRequest? @relation(fields: [legalOpinionId], references: [id], onDelete: Cascade)
  serviceRequest      ServiceRequest?      @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
  litigationCase      LitigationCase?      @relation(fields: [litigationCaseId], references: [id], onDelete: Cascade)
  callRequest         CallRequest?         @relation(fields: [callRequestId], references: [id], onDelete: Cascade)
  
  @@index([subscriberId])
}

// ============================================
// SUPPORT TICKETS
// ============================================
model SupportTicket {
  id            String   @id @default(uuid())
  ticketNumber  String   @unique
  subscriberId  String
  
  subject       String
  description   String
  category      String   // technical, billing, general
  priority      String   @default("normal") // low, normal, high
  status        String   @default("open") // open, in_progress, resolved, closed
  
  assignedTo    String?
  resolvedAt    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?
  
  subscriber    User     @relation(fields: [subscriberId], references: [id])
  
  documents     Document[]
  messages      RequestMessage[]
  
  @@index([subscriberId, status])
  @@index([status, priority])
}

// ============================================
// SLA & ROUTING
// ============================================
model SLAPolicy {
  id                String   @id @default(uuid())
  name              String   @unique
  requestType       String   // consultation, legal_opinion, service, litigation, call
  priority          String   @default("normal")
  
  responseTime      Int      // minutes
  resolutionTime    Int      // minutes
  escalationTime    Int?     // minutes
  
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([requestType, priority])
}

model RoutingRule {
  id                String   @id @default(uuid())
  name              String
  requestType       String
  conditions        Json?    // e.g., {category: "commercial", urgency: "high"}
  priority          Int      @default(0)
  
  routingStrategy   String   // round_robin, load_balanced, specialized
  targetProviders   Json?    // Array of provider IDs or criteria
  
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([requestType, isActive])
}

// ============================================
// NOTIFICATIONS
// ============================================
model Notification {
  id          String   @id @default(uuid())
  userId      String
  type        String   // request_assigned, request_update, payment_due, etc.
  title       String
  titleAr     String?
  message     String
  messageAr   String?
  
  relatedEntityType String? // consultation, legal_opinion, etc.
  relatedEntityId   String?
  
  isRead      Boolean  @default(false)
  readAt      DateTime?
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([userId, createdAt])
}

model NotificationPreference {
  id          String   @id @default(uuid())
  userId      String
  channel     String   // email, sms, push, in_app
  eventType   String   // request_assigned, payment_due, etc.
  enabled     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, channel, eventType])
}

// ============================================
// DISCOUNT CAMPAIGNS
// ============================================
model DiscountCampaign {
  id                String   @id @default(uuid())
  name              String
  nameAr            String?
  description       String?
  descriptionAr     String?
  
  discountType      String   // percentage, fixed
  discountValue     Float
  
  targetType        String   // all, new_users, tier_based
  targetCriteria    Json?
  
  validFrom         DateTime
  validUntil        DateTime?
  maxRedemptions    Int?
  currentRedemptions Int     @default(0)
  
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([isActive, validFrom, validUntil])
}

// ============================================
// REPORTS & ANALYTICS
// ============================================
model Report {
  id            String   @id @default(uuid())
  name          String
  reportType    String   // financial, operational, performance, compliance
  parameters    Json?
  
  generatedBy   String?
  generatedAt   DateTime @default(now())
  
  fileUrl       String?
  status        String   @default("completed") // pending, completed, failed
  
  @@index([reportType, generatedAt])
}

model AnalyticsMetric {
  id            String   @id @default(uuid())
  metricName    String
  metricType    String   // counter, gauge, histogram
  value         Float
  dimensions    Json?    // {requestType: "consultation", status: "completed"}
  timestamp     DateTime @default(now())
  
  @@index([metricName, timestamp])
  @@index([timestamp])
}

// ============================================
// COMPLIANCE & AUDIT
// ============================================
model Session {
  id           String   @id @default(uuid())
  userId       String
  refreshToken String   @unique
  ipAddress    String?
  userAgent    String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  lastUsedAt   DateTime @default(now())
  deletedAt    DateTime?
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model AuditLog {
  id          String   @id @default(uuid())
  userId      String?
  action      String   // login, create_request, update_status, etc.
  entityType  String?  // user, consultation, payment, etc.
  entityId    String?
  details     Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId, createdAt])
  @@index([action, createdAt])
  @@index([entityType, entityId])
}

model DataExportRequest {
  id            String   @id @default(uuid())
  userId        String
  requestType   String   // data_export, account_deletion
  status        String   @default("pending") // pending, processing, completed, failed
  
  exportFileUrl String?
  completedAt   DateTime?
  expiresAt     DateTime?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([userId, status])
}

model ConsentLog {
  id            String   @id @default(uuid())
  userId        String?
  consentType   String   // terms_and_conditions, privacy_policy, marketing
  version       String
  accepted      Boolean
  ipAddress     String?
  createdAt     DateTime @default(now())
  
  @@index([userId, consentType])
}

// ============================================
// ANALYTICS & TRACKING
// ============================================
model UserActivity {
  id          String   @id @default(uuid())
  userId      String?
  sessionId   String?
  action      String   // page_view, button_click, form_submit, etc.
  page        String?
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId, createdAt])
  @@index([action, createdAt])
}

// ============================================
// SYSTEM CONFIGURATION
// ============================================
model SystemConfig {
  id          String   @id @default(uuid())
  key         String   @unique
  value       Json
  description String?
  category    String?  // payment, notification, sla, etc.
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([category])
}

model ErrorLog {
  id          String   @id @default(uuid())
  level       String   // error, warning, info
  message     String
  stack       String?
  context     Json?
  userId      String?
  requestId   String?
  createdAt   DateTime @default(now())
  
  @@index([level, createdAt])
  @@index([createdAt])
}

model JobQueue {
  id          String   @id @default(uuid())
  type        String   // email, sms, notification, report_generation, etc.
  payload     Json
  status      String   @default("pending") // pending, processing, completed, failed, retrying
  priority    Int      @default(0)
  attempts    Int      @default(0)
  maxAttempts Int      @default(3)
  scheduledAt DateTime?
  startedAt   DateTime?
  completedAt DateTime?
  error       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([status, scheduledAt])
  @@index([type, status])
}

// ============================================
// INTEGRATIONS
// ============================================
model IntegrationConfig {
  id          String   @id @default(uuid())
  provider    String   @unique // moyasar, hyperpay, twilio, sendgrid, nafath, elm
  config      Json     // API keys, endpoints, etc. (encrypted)
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WebhookLog {
  id          String   @id @default(uuid())
  provider    String
  event       String
  payload     Json
  status      String   // received, processed, failed
  processedAt DateTime?
  error       String?
  createdAt   DateTime @default(now())
  
  @@index([provider, event, createdAt])
}

// ============================================
// CONTENT MANAGEMENT
// ============================================
model LegalCategory {
  id          String   @id @default(uuid())
  name        String   @unique
  nameAr      String
  description String?
  descriptionAr String?
  parentId    String?
  icon        String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  parent      LegalCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    LegalCategory[] @relation("CategoryHierarchy")
  
  @@index([parentId])
  @@index([isActive, sortOrder])
}

model FAQ {
  id          String   @id @default(uuid())
  question    String
  questionAr  String
  answer      String
  answerAr    String
  category    String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  viewCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([category, isActive])
}

model SystemMessage {
  id          String   @id @default(uuid())
  type        String   // banner, modal, alert
  title       String
  titleAr     String?
  message     String
  messageAr   String?
  severity    String   // info, warning, error, success
  
  targetUsers String?  // all, subscribers, providers, admins
  
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([isActive, startDate, endDate])
}